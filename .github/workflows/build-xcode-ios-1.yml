name: Xcode - Build and Analyze

on:
  workflow_dispatch:                            # Allow manual triggering of the workflow
  #  push:
  #    branches: [ "main" ]                     # Trigger the workflow on pushes to the main branch
  #  pull_request:
  #    branches: [ "main" ]                     # Trigger the workflow on pulles to the main branch
    
jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    # runs-on: macos-latest
    runs-on: macos-15
    steps:

      - name: Select Xcode 16.4
        run: |
          sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
          echo "Current Xcode version:"
          xcodebuild -version

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          # scheme_list=$(xcodebuild -list -json | tr -d "\n")
          # default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          scheme="VisitManaagementApp_iOS"
          default="VisitManaagementApp_iOS"
          echo $default | cat >default
          echo Using scheme: $scheme
          echo Using default scheme: $default

      - name: Check current Xcode version
        run: |
          echo "Current Xcode version:"
          xcodebuild -version
          echo "- - - - - - - - - - - - -"
          echo "Available Xcode versions:"
          ls /Applications/ | grep Xcode

      - name: Install the Apple certificate and provisioning profile
        id: profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Debug - List project contents
        run: |
          echo "=== Project Directory Contents ==="
          ls -la
          echo "=== Xcode Project Contents ==="
          if [ -d "VisitManagementApp.xcodeproj" ]; then
            ls -la VisitManagementApp.xcodeproj/
            echo "=== Project.pbxproj exists? ==="
            ls -la VisitManagementApp.xcodeproj/project.pbxproj
          else
            echo "ERROR: VisitManagementApp.xcodeproj not found!"
          fi
          echo "=== Available Schemes ==="
          xcodebuild -list -project VisitManagementApp.xcodeproj || echo "Failed to list schemes"
          echo "=== Available Simulators ==="
          xcrun simctl list devices available
      
          # Install CocoaPods if you're using it
          # sudo gem install cocoapods
          # pod install
          
          # Install Swift Package Manager dependencies (if needed)
          # xcodebuild -resolvePackageDependencies

      - name: Build
        env:
          scheme: ${{ 'VisitManaagementApp_iOS' }}
        run: |
          # echo BLOCKED - until code can be added to update xcodebuild to a newer version
          # if [ $scheme = default ]; then scheme=$(cat default); fi

          echo "=== Build Setup ==="
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "Current Xcode version:"
          xcodebuild -version
          echo Using scheme: $scheme
          echo Using filetype_parameter: $filetype_parameter
          echo Using file_to_build: $file_to_build

          # echo "=== Running Build ==="
          # xcodebuild clean archive \
          # -workspace project.xcworkspace  \
          # -scheme "VisitManaagementApp_iOS" \
          # -configuration Debug \
          # -destination generic/platform=iOS \
          # -archivePath build/project.xcarchive \
          # CODE_SIGN_IDENTITY="Apple Distribution: Daryl Cox (6CVN7U97NK)" \
          # PROVISIONING_PROFILE_SPECIFIER="YourProvisioningProfileName" \
          # DEVELOPMENT_TEAM="6CVN7U97NK"

          echo "=== Running Build ==="
          xcodebuild clean build \
          -project VisitManagementApp.xcodeproj  \
          -scheme "VisitManaagementApp_iOS" \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -configuration Debug \
          -verbose \
          CODE_SIGN_IDENTITY="Apple Distribution: Daryl Cox (6CVN7U97NK)" \
          CODE_SIGNING_REQUIRED=YES \
          DEVELOPMENT_TEAM="6CVN7U97NK" 2>&1 | tee build_output.log

          echo "=== Build Command Exit Code: $? ==="
          if [ $? -ne 0 ]; then
            echo "=== BUILD FAILED - Full Output Below ==="
            cat build_output.log
            exit 1
          fi

          # echo Running: xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty && exit ${PIPESTATUS[0]}
          # xcodebuild clean build analyze -verbose -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty && exit ${PIPESTATUS[0]}
          # xcodebuild clean build analyze -verbose -scheme "$scheme" -"$filetype_parameter" "$file_to_build" >> $GITHUB_OUTPUT | exit ${PIPESTATUS[0]}
          # xcodebuild clean build -verbose -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | exit ${PIPESTATUS[0]}

          # xcodebuild PROVISIONING_PROFILE=${{ steps.profile.outputs.uuid }} -scheme ${{ env.XCODE_PROJECT }}
          #            clean archive -archivePath "Actions" -configuration Release -arch arm64

          # Works on mini at command line (terminal):
          # xcodebuild clean build analyze -verbose -scheme "VisitManaagementApp_iOS" -"project" "VisitManagementApp.xcodeproj"

      - name: Upload build logs
        # if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build.log
            build/reports/
          retention-days: 30

      - name: Archive iOS app (Release)
        if: github.ref == 'refs/heads/main'
        run: |
          xcodebuild archive \
            -project VisitManagementApp.xcodeproj \
            -scheme VisitManagementApp \
            -destination 'generic/platform=iOS' \
            -archivePath build/VisitManagementApp.xcarchive \
            -configuration Debug \
            -verbose \
            CODE_SIGN_IDENTITY="Apple Distribution: Daryl Cox (6CVN7U97NK)" \
            CODE_SIGNING_REQUIRED=YES \
            DEVELOPMENT_TEAM="6CVN7U97NK" 2>&1 | tee archive_output.log
      
      - name: Export IPA
        if: github.ref == 'refs/heads/main'
        run: |
          xcodebuild -exportArchive \
            -archivePath build/VisitManagementApp.xcarchive \
            -exportPath build/ \
            -exportOptionsPlist ExportOptions.plist
